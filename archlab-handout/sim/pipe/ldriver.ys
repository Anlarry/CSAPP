#######################################################################
# Test for copying block of size 63;
#######################################################################
	.pos 0
main:	irmovq Stack, %rsp  	# Set up stack pointer

	# Set up arguments for copy function and then invoke it
	irmovq $63, %rdx		# src and dst have 63 elements
	irmovq dest, %rsi	# dst array
	irmovq src, %rdi	# src array
	call ncopy		 
	halt			# should halt with num nonzeros in %rax
StartFun:
#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Include your name and ID here.
#
# Describe how and why you modified the baseline code.
#
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
# You can modify this portion
	# Loop header
	xorq %rax,%rax		# count = 0
	# xorq %rbx,%rbx      # iterator var
	# irmovq $0xffffffffffffffff, %rbx
	# irmovq $1, %rbp
	iaddq $-10,%rdx      # 
	# andq %rdx,%rdx		# len <= 0? ## len > 0
	jl L2		# if so, goto Done: ## if so, goto Loop
Loop:	
	mrmovq (%rdi), %r8
	mrmovq 0x8(%rdi), %r9
	mrmovq 0x10(%rdi), %r10
	mrmovq 0x18(%rdi), %r11
	mrmovq 0x20(%rdi), %r12
	mrmovq 0x28(%rdi), %r13
	mrmovq 0x30(%rdi), %r14
	mrmovq 0x38(%rdi), %rcx
	mrmovq 0x40(%rdi), %rbx
	mrmovq 0x48(%rdi), %rbp
	andq %r8,%r8
	rmmovq %r8, (%rsi)
	rmmovq %r9, 8(%rsi)
	rmmovq %rbx, 0x40(%rsi)
	rmmovq %rbp, 0x48(%rsi)
	jle L1_2
	iaddq $1, %rax
L1_2:
	andq %r9,%r9
	jle L1_3
	iaddq $1, %rax
L1_3:
	andq %r10,%r10
	rmmovq %r10, 0x10(%rsi)
	rmmovq %r11, 0x18(%rsi)
	jle L1_4
	iaddq $1, %rax
L1_4:
	andq %r11,%r11
	jle L1_5
	iaddq $1, %rax
L1_5:
	andq %r12,%r12
	rmmovq %r12, 0x20(%rsi)
	rmmovq %r13, 0x28(%rsi)
	jle L1_6
	iaddq $1, %rax
L1_6:
	andq %r13,%r13
	jle L1_7
	iaddq $1, %rax
L1_7:
	andq %r14,%r14
	rmmovq %r14, 0x30(%rsi)
	rmmovq %rcx, 0x38(%rsi)
	jle L1_8
	iaddq $1, %rax
L1_8:
	andq %rcx,%rcx
	jle L1_9
	iaddq $1, %rax
L1_9:
	andq %rbx, %rbx
	jle L1_10
	iaddq $1, %rax
L1_10:
	andq %rbp,  %rbp
	jle L1_11
	iaddq $1, %rax
L1_11:
	iaddq $0x50, %rdi
	iaddq $0x50, %rsi
	iaddq $-10, %rdx
	jge Loop
L2:
	iaddq $9, %rdx
	jg Loop2
	# iaddq $2, %rdx
	jl L2_Done
	mrmovq (%rdi),%r8
	rmmovq %r8, (%rsi)
	andq %r8, %r8
	jle Done
	iaddq $1, %rax
	#addq %r9, %rdx
	# jle L2_Done
L2_Done:
	ret
	
Loop2:
	mrmovq (%rdi), %r8
	mrmovq 8(%rdi), %r9
	# iaddq $8, %rdi
	# iaddq $8, %rsi
	iaddq $-2, %rdx
	jg L2_0
	je D3 # last 3
	rmmovq %r8, (%rsi)
	rmmovq %r9, 8(%rsi)
	andq %r8,%r8
	jle D2_1
	iaddq $1, %rax
D2_1:
	andq %r9, %r9
	jle Done
	iaddq $1, %rax
	ret
D3:
	mrmovq 0x10(%rdi), %r10
	rmmovq %r8, (%rsi)
	rmmovq %r9, 8(%rsi)
	rmmovq %r10, 0x10(%rsi)
	andq %r8, %r8
	jle D3_1
	iaddq $1, %rax
D3_1:
	andq %r9, %r9
	jle D3_2
	iaddq $1, %rax
D3_2:
	andq %r10, %r10
	jle Done
	iaddq $1, %rax
	ret

L2_0:
	rmmovq %r8, (%rsi)
	rmmovq %r9, 8(%rsi)
	andq %r8,%r8
	jle L2_1
	iaddq $1, %rax
L2_1:
	andq %r9, %r9
	jle L2_2
	iaddq $1, %rax
L2_2:
	iaddq $0x10, %rdi
	iaddq $0x10, %rsi
	# iaddq $-2, %rdx
	jmp Loop2
	# iaddq $2, %rdx
	# je Done
	# mrmovq (%rdi),%r8
	# rmmovq %r8, (%rsi)
	#andq %r8, %r8
	#jle Done 
	#iaddq $1, %rax	
	# mrmovq (%rdi), %r10	# read val from src...
	# rmmovq %r10, (%rsi)	# ...and store it to dst
	# andq %r10, %r10		# val <= 0?
	# jle Npos		# if so, goto Npos:
	# irmovq $1, %r10
	# addq %r10, %rax		# count++
	# iaddq $1, %rax
# Npos:	
	# irmovq $1, %r10
	# subq %r10, %rdx		# len--	
	# irmovq $8, %r10
	# addq %r10, %rdi		# src++
	# addq %r10, %rsi		# dst++
	# iaddq $8, %rdi
	# iaddq $8, %rsi
	# iaddq $-1,%rdx
	# andq %rdx,%rdx		# len > 0?
	# jg Loop			# if so, goto Loop:
##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
EndFun:

###############################
# Source and destination blocks 
###############################
	.align 8
src:
	.quad 1
	.quad -2
	.quad 3
	.quad -4
	.quad -5
	.quad 6
	.quad 7
	.quad 8
	.quad -9
	.quad -10
	.quad -11
	.quad -12
	.quad 13
	.quad -14
	.quad -15
	.quad -16
	.quad -17
	.quad -18
	.quad -19
	.quad 20
	.quad 21
	.quad -22
	.quad 23
	.quad -24
	.quad 25
	.quad -26
	.quad 27
	.quad -28
	.quad -29
	.quad 30
	.quad -31
	.quad -32
	.quad -33
	.quad 34
	.quad -35
	.quad -36
	.quad 37
	.quad 38
	.quad -39
	.quad 40
	.quad 41
	.quad -42
	.quad -43
	.quad 44
	.quad -45
	.quad 46
	.quad -47
	.quad -48
	.quad -49
	.quad 50
	.quad 51
	.quad -52
	.quad 53
	.quad 54
	.quad 55
	.quad 56
	.quad -57
	.quad 58
	.quad 59
	.quad 60
	.quad 61
	.quad 62
	.quad 63
	.quad 0xbcdefa # This shouldn't get moved

	.align 16
Predest:
	.quad 0xbcdefa
dest:
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
Postdest:
	.quad 0xdefabc

.align 8
# Run time stack
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0

Stack:
