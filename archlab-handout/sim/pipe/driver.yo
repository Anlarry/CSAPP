                            | #######################################################################
                            | # Test for copying block of size 21;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f4d806000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f21500000000000000 | 	irmovq $21, %rdx		# src and dst have 21 elements
0x014: 30f6a805000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f7e804000000000000 | 	irmovq src, %rdi	# src array
0x028: 803b00000000000000   | 	call ncopy		 
0x031: 807d03000000000000   | 	call check	        # Call checker code
0x03a: 00                   | 	halt                    # should halt with 0xaaaa in %rax
0x03b:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | #
                            | # Describe how and why you modified the baseline code.
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x03b:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            | 	# Loop header
0x03b: 6300                 | 	xorq %rax,%rax		# count = 0
                            | 	# xorq %rbx,%rbx      # iterator var
                            | 	# irmovq $0xffffffffffffffff, %rbx
                            | 	# irmovq $1, %rbp
0x03d: c0f2f6ffffffffffffff | 	iaddq $-10,%rdx      # 
                            | 	# andq %rdx,%rdx		# len <= 0? ## len > 0
0x047: 721102000000000000   | 	jl L2		# if so, goto Done: ## if so, goto Loop
0x050:                      | Loop:	
0x050: 50870000000000000000 | 	mrmovq (%rdi), %r8
0x05a: 50970800000000000000 | 	mrmovq 0x8(%rdi), %r9
0x064: 50a71000000000000000 | 	mrmovq 0x10(%rdi), %r10
0x06e: 50b71800000000000000 | 	mrmovq 0x18(%rdi), %r11
0x078: 50c72000000000000000 | 	mrmovq 0x20(%rdi), %r12
0x082: 50d72800000000000000 | 	mrmovq 0x28(%rdi), %r13
0x08c: 50e73000000000000000 | 	mrmovq 0x30(%rdi), %r14
0x096: 50173800000000000000 | 	mrmovq 0x38(%rdi), %rcx
0x0a0: 50374000000000000000 | 	mrmovq 0x40(%rdi), %rbx
0x0aa: 50574800000000000000 | 	mrmovq 0x48(%rdi), %rbp
0x0b4: 6288                 | 	andq %r8,%r8
0x0b6: 40860000000000000000 | 	rmmovq %r8, (%rsi)
0x0c0: 40960800000000000000 | 	rmmovq %r9, 8(%rsi)
0x0ca: 40364000000000000000 | 	rmmovq %rbx, 0x40(%rsi)
0x0d4: 40564800000000000000 | 	rmmovq %rbp, 0x48(%rsi)
0x0de: 71f100000000000000   | 	jle L1_2
0x0e7: c0f00100000000000000 | 	iaddq $1, %rax
0x0f1:                      | L1_2:
0x0f1: 6299                 | 	andq %r9,%r9
0x0f3: 710601000000000000   | 	jle L1_3
0x0fc: c0f00100000000000000 | 	iaddq $1, %rax
0x106:                      | L1_3:
0x106: 62aa                 | 	andq %r10,%r10
0x108: 40a61000000000000000 | 	rmmovq %r10, 0x10(%rsi)
0x112: 40b61800000000000000 | 	rmmovq %r11, 0x18(%rsi)
0x11c: 712f01000000000000   | 	jle L1_4
0x125: c0f00100000000000000 | 	iaddq $1, %rax
0x12f:                      | L1_4:
0x12f: 62bb                 | 	andq %r11,%r11
0x131: 714401000000000000   | 	jle L1_5
0x13a: c0f00100000000000000 | 	iaddq $1, %rax
0x144:                      | L1_5:
0x144: 62cc                 | 	andq %r12,%r12
0x146: 40c62000000000000000 | 	rmmovq %r12, 0x20(%rsi)
0x150: 40d62800000000000000 | 	rmmovq %r13, 0x28(%rsi)
0x15a: 716d01000000000000   | 	jle L1_6
0x163: c0f00100000000000000 | 	iaddq $1, %rax
0x16d:                      | L1_6:
0x16d: 62dd                 | 	andq %r13,%r13
0x16f: 718201000000000000   | 	jle L1_7
0x178: c0f00100000000000000 | 	iaddq $1, %rax
0x182:                      | L1_7:
0x182: 62ee                 | 	andq %r14,%r14
0x184: 40e63000000000000000 | 	rmmovq %r14, 0x30(%rsi)
0x18e: 40163800000000000000 | 	rmmovq %rcx, 0x38(%rsi)
0x198: 71ab01000000000000   | 	jle L1_8
0x1a1: c0f00100000000000000 | 	iaddq $1, %rax
0x1ab:                      | L1_8:
0x1ab: 6211                 | 	andq %rcx,%rcx
0x1ad: 71c001000000000000   | 	jle L1_9
0x1b6: c0f00100000000000000 | 	iaddq $1, %rax
0x1c0:                      | L1_9:
0x1c0: 6233                 | 	andq %rbx, %rbx
0x1c2: 71d501000000000000   | 	jle L1_10
0x1cb: c0f00100000000000000 | 	iaddq $1, %rax
0x1d5:                      | L1_10:
0x1d5: 6255                 | 	andq %rbp,  %rbp
0x1d7: 71ea01000000000000   | 	jle L1_11
0x1e0: c0f00100000000000000 | 	iaddq $1, %rax
0x1ea:                      | L1_11:
0x1ea: c0f75000000000000000 | 	iaddq $0x50, %rdi
0x1f4: c0f65000000000000000 | 	iaddq $0x50, %rsi
0x1fe: c0f2f6ffffffffffffff | 	iaddq $-10, %rdx
0x208: 755000000000000000   | 	jge Loop
0x211:                      | L2:
0x211: c0f20900000000000000 | 	iaddq $9, %rdx
0x21b: 764a02000000000000   | 	jg Loop2
                            | 	# iaddq $2, %rdx
0x224: 724902000000000000   | 	jl L2_Done
0x22d: 50870000000000000000 | 	mrmovq (%rdi),%r8
0x237: 6399                 | 	xorq %r9, %r9
0x239: 40860000000000000000 | 	rmmovq %r8, (%rsi)
0x243: 6288                 | 	andq %r8, %r8
0x245: 2629                 | 	cmovg %rdx, %r9
0x247: 6092                 | 	addq %r9, %rdx
                            | 	# jle L2_Done
                            | 	#iaddq $1, %rax
0x249:                      | L2_Done:
0x249: 90                   | 	ret
                            | 	
0x24a:                      | Loop2:
0x24a: 50870000000000000000 | 	mrmovq (%rdi), %r8
0x254: 50970800000000000000 | 	mrmovq 8(%rdi), %r9
                            | 	# iaddq $8, %rdi
                            | 	# iaddq $8, %rsi
0x25e: c0f2feffffffffffffff | 	iaddq $-2, %rdx
0x268: 762103000000000000   | 	jg L2_0
0x271: 73b902000000000000   | 	je D3 # last 3
0x27a: 40860000000000000000 | 	rmmovq %r8, (%rsi)
0x284: 40960800000000000000 | 	rmmovq %r9, 8(%rsi)
0x28e: 6288                 | 	andq %r8,%r8
0x290: 71a302000000000000   | 	jle D2_1
0x299: c0f00100000000000000 | 	iaddq $1, %rax
0x2a3:                      | D2_1:
0x2a3: 6299                 | 	andq %r9, %r9
0x2a5: 717c03000000000000   | 	jle Done
0x2ae: c0f00100000000000000 | 	iaddq $1, %rax
0x2b8: 90                   | 	ret
0x2b9:                      | D3:
0x2b9: 50a71000000000000000 | 	mrmovq 0x10(%rdi), %r10
0x2c3: 40860000000000000000 | 	rmmovq %r8, (%rsi)
0x2cd: 40960800000000000000 | 	rmmovq %r9, 8(%rsi)
0x2d7: 40a61000000000000000 | 	rmmovq %r10, 0x10(%rsi)
0x2e1: 6288                 | 	andq %r8, %r8
0x2e3: 71f602000000000000   | 	jle D3_1
0x2ec: c0f00100000000000000 | 	iaddq $1, %rax
0x2f6:                      | D3_1:
0x2f6: 6299                 | 	andq %r9, %r9
0x2f8: 710b03000000000000   | 	jle D3_2
0x301: c0f00100000000000000 | 	iaddq $1, %rax
0x30b:                      | D3_2:
0x30b: 62aa                 | 	andq %r10, %r10
0x30d: 717c03000000000000   | 	jle Done
0x316: c0f00100000000000000 | 	iaddq $1, %rax
0x320: 90                   | 	ret
                            | 
0x321:                      | L2_0:
0x321: 40860000000000000000 | 	rmmovq %r8, (%rsi)
0x32b: 40960800000000000000 | 	rmmovq %r9, 8(%rsi)
0x335: 6288                 | 	andq %r8,%r8
0x337: 714a03000000000000   | 	jle L2_1
0x340: c0f00100000000000000 | 	iaddq $1, %rax
0x34a:                      | L2_1:
0x34a: 6299                 | 	andq %r9, %r9
0x34c: 715f03000000000000   | 	jle L2_2
0x355: c0f00100000000000000 | 	iaddq $1, %rax
0x35f:                      | L2_2:
0x35f: c0f71000000000000000 | 	iaddq $0x10, %rdi
0x369: c0f61000000000000000 | 	iaddq $0x10, %rsi
                            | 	# iaddq $-2, %rdx
0x373: 704a02000000000000   | 	jmp Loop2
                            | 	# iaddq $2, %rdx
                            | 	# je Done
                            | 	# mrmovq (%rdi),%r8
                            | 	# rmmovq %r8, (%rsi)
                            | 	#andq %r8, %r8
                            | 	#jle Done 
                            | 	#iaddq $1, %rax	
                            | 	# mrmovq (%rdi), %r10	# read val from src...
                            | 	# rmmovq %r10, (%rsi)	# ...and store it to dst
                            | 	# andq %r10, %r10		# val <= 0?
                            | 	# jle Npos		# if so, goto Npos:
                            | 	# irmovq $1, %r10
                            | 	# addq %r10, %rax		# count++
                            | 	# iaddq $1, %rax
                            | # Npos:	
                            | 	# irmovq $1, %r10
                            | 	# subq %r10, %rdx		# len--	
                            | 	# irmovq $8, %r10
                            | 	# addq %r10, %rdi		# src++
                            | 	# addq %r10, %rsi		# dst++
                            | 	# iaddq $8, %rdi
                            | 	# iaddq $8, %rsi
                            | 	# iaddq $-1,%rdx
                            | 	# andq %rdx,%rdx		# len > 0?
                            | 	# jg Loop			# if so, goto Loop:
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x37c:                      | Done:
0x37c: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x37d:                      | End:
                            | #/* $end ncopy-ys */
0x37d:                      | EndFun:
                            | #################################################################### 
                            | # Epilogue code for the correctness testing driver
                            | ####################################################################
                            | 
                            | # This is the correctness checking code.
                            | # It checks:
                            | #   1. %rax has 11.  Set %rax to 0xbbbb if not.
                            | #   2. The total length of the code is less than or equal to 1000.
                            | #      Set %rax to 0xcccc if not.
                            | #   3. The source data was copied to the destination.
                            | #      Set %rax to 0xdddd if not.
                            | #   4. The words just before and just after the destination region
                            | #      were not corrupted.  Set %rax to 0xeeee if not.
                            | # If all checks pass, then sets %rax to 0xaaaa
0x37d:                      | check:
                            | 	# Return value test
0x37d: 30fa0b00000000000000 | 	irmovq $11,%r10
0x387: 61a0                 | 	subq %r10,%rax
0x389: 73a503000000000000   | 	je checkb
0x392: 30f0bbbb000000000000 | 	irmovq $0xbbbb,%rax  # Failed test #1
0x39c: 70e304000000000000   | 	jmp cdone
0x3a5:                      | checkb:
                            | 	# Code length check
0x3a5: 30f07d03000000000000 | 	irmovq EndFun,%rax
0x3af: 30f23b00000000000000 | 	irmovq StartFun,%rdx
0x3b9: 6120                 | 	subq %rdx,%rax
0x3bb: 30f2e803000000000000 | 	irmovq $1000,%rdx
0x3c5: 6102                 | 	subq %rax,%rdx
0x3c7: 75e303000000000000   | 	jge checkm
0x3d0: 30f0cccc000000000000 | 	irmovq $0xcccc,%rax  # Failed test #2
0x3da: 70e304000000000000   | 	jmp cdone
0x3e3:                      | checkm:
0x3e3: 30f2a805000000000000 | 	irmovq dest, %rdx # Pointer to next destination location
0x3ed: 30f3e804000000000000 | 	irmovq src,%rbx   # Pointer to next source location
0x3f7: 30f71500000000000000 | 	irmovq $21,%rdi  # Count
0x401: 6277                 | 	andq %rdi,%rdi
0x403: 736104000000000000   | 	je checkpre         # Skip check if count = 0
0x40c:                      | mcloop:
0x40c: 50020000000000000000 | 	mrmovq (%rdx),%rax
0x416: 50630000000000000000 | 	mrmovq (%rbx),%rsi
0x420: 6160                 | 	subq %rsi,%rax
0x422: 733e04000000000000   | 	je  mok
0x42b: 30f0dddd000000000000 | 	irmovq $0xdddd,%rax # Failed test #3
0x435: 70e304000000000000   | 	jmp cdone
0x43e:                      | mok:
0x43e: 30f00800000000000000 | 	irmovq $8,%rax
0x448: 6002                 | 	addq %rax,%rdx	  # dest ++
0x44a: 6003                 | 	addq %rax,%rbx    # src++
0x44c: 30f00100000000000000 | 	irmovq $1,%rax
0x456: 6107                 | 	subq %rax,%rdi    # cnt--
0x458: 760c04000000000000   | 	jg mcloop
0x461:                      | checkpre:
                            | 	# Check for corruption
0x461: 30f2a005000000000000 | 	irmovq Predest,%rdx
0x46b: 50020000000000000000 | 	mrmovq (%rdx), %rax  # Get word before destination
0x475: 30f2fadebc0000000000 | 	irmovq $0xbcdefa, %rdx
0x47f: 6120                 | 	subq %rdx,%rax
0x481: 739d04000000000000   | 	je checkpost
0x48a: 30f0eeee000000000000 | 	irmovq $0xeeee,%rax  # Failed test #4
0x494: 70e304000000000000   | 	jmp cdone
0x49d:                      | checkpost:
                            | 	# Check for corruption
0x49d: 30f25006000000000000 | 	irmovq Postdest,%rdx
0x4a7: 50020000000000000000 | 	mrmovq (%rdx), %rax  # Get word after destination
0x4b1: 30f2bcfade0000000000 | 	irmovq $0xdefabc, %rdx
0x4bb: 6120                 | 	subq %rdx,%rax
0x4bd: 73d904000000000000   | 	je checkok
0x4c6: 30f0eeee000000000000 | 	irmovq $0xeeee,%rax # Failed test #4
0x4d0: 70e304000000000000   | 	jmp cdone
0x4d9:                      | checkok:
                            | 	# Successful checks
0x4d9: 30f0aaaa000000000000 | 	irmovq $0xaaaa,%rax
0x4e3:                      | cdone:
0x4e3: 90                   | 	ret
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x4e8:                      | 	.align 8
0x4e8:                      | src:
0x4e8: ffffffffffffffff     | 	.quad -1
0x4f0: 0200000000000000     | 	.quad 2
0x4f8: 0300000000000000     | 	.quad 3
0x500: 0400000000000000     | 	.quad 4
0x508: fbffffffffffffff     | 	.quad -5
0x510: faffffffffffffff     | 	.quad -6
0x518: f9ffffffffffffff     | 	.quad -7
0x520: 0800000000000000     | 	.quad 8
0x528: 0900000000000000     | 	.quad 9
0x530: 0a00000000000000     | 	.quad 10
0x538: 0b00000000000000     | 	.quad 11
0x540: 0c00000000000000     | 	.quad 12
0x548: f3ffffffffffffff     | 	.quad -13
0x550: f2ffffffffffffff     | 	.quad -14
0x558: f1ffffffffffffff     | 	.quad -15
0x560: 1000000000000000     | 	.quad 16
0x568: 1100000000000000     | 	.quad 17
0x570: eeffffffffffffff     | 	.quad -18
0x578: 1300000000000000     | 	.quad 19
0x580: ecffffffffffffff     | 	.quad -20
0x588: ebffffffffffffff     | 	.quad -21
0x590: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x5a0:                      | 	.align 16
0x5a0:                      | Predest:
0x5a0: fadebc0000000000     | 	.quad 0xbcdefa
0x5a8:                      | dest:
0x5a8: abefcd0000000000     | 	.quad 0xcdefab
0x5b0: abefcd0000000000     | 	.quad 0xcdefab
0x5b8: abefcd0000000000     | 	.quad 0xcdefab
0x5c0: abefcd0000000000     | 	.quad 0xcdefab
0x5c8: abefcd0000000000     | 	.quad 0xcdefab
0x5d0: abefcd0000000000     | 	.quad 0xcdefab
0x5d8: abefcd0000000000     | 	.quad 0xcdefab
0x5e0: abefcd0000000000     | 	.quad 0xcdefab
0x5e8: abefcd0000000000     | 	.quad 0xcdefab
0x5f0: abefcd0000000000     | 	.quad 0xcdefab
0x5f8: abefcd0000000000     | 	.quad 0xcdefab
0x600: abefcd0000000000     | 	.quad 0xcdefab
0x608: abefcd0000000000     | 	.quad 0xcdefab
0x610: abefcd0000000000     | 	.quad 0xcdefab
0x618: abefcd0000000000     | 	.quad 0xcdefab
0x620: abefcd0000000000     | 	.quad 0xcdefab
0x628: abefcd0000000000     | 	.quad 0xcdefab
0x630: abefcd0000000000     | 	.quad 0xcdefab
0x638: abefcd0000000000     | 	.quad 0xcdefab
0x640: abefcd0000000000     | 	.quad 0xcdefab
0x648: abefcd0000000000     | 	.quad 0xcdefab
0x650:                      | Postdest:
0x650: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x658:                      | .align 8
                            | # Run time stack
0x658: 0000000000000000     | 	.quad 0
0x660: 0000000000000000     | 	.quad 0
0x668: 0000000000000000     | 	.quad 0
0x670: 0000000000000000     | 	.quad 0
0x678: 0000000000000000     | 	.quad 0
0x680: 0000000000000000     | 	.quad 0
0x688: 0000000000000000     | 	.quad 0
0x690: 0000000000000000     | 	.quad 0
0x698: 0000000000000000     | 	.quad 0
0x6a0: 0000000000000000     | 	.quad 0
0x6a8: 0000000000000000     | 	.quad 0
0x6b0: 0000000000000000     | 	.quad 0
0x6b8: 0000000000000000     | 	.quad 0
0x6c0: 0000000000000000     | 	.quad 0
0x6c8: 0000000000000000     | 	.quad 0
0x6d0: 0000000000000000     | 	.quad 0
                            | 
0x6d8:                      | Stack:
