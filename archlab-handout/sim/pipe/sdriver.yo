                            | #######################################################################
                            | # Test for copying block of size 4;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f46004000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f20400000000000000 | 	irmovq $4, %rdx		# src and dst have 4 elements
0x014: 30f6b803000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f78803000000000000 | 	irmovq src, %rdi	# src array
0x028: 803200000000000000   | 	call ncopy		 
0x031: 00                   | 	halt			# should halt with num nonzeros in %rax
0x032:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | #
                            | # Describe how and why you modified the baseline code.
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x032:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            | 	# Loop header
0x032: 6300                 | 	xorq %rax,%rax		# count = 0
                            | 	# xorq %rbx,%rbx      # iterator var
                            | 	# irmovq $0xffffffffffffffff, %rbx
                            | 	# irmovq $1, %rbp
0x034: c0f2f6ffffffffffffff | 	iaddq $-10,%rdx      # 
                            | 	# andq %rdx,%rdx		# len <= 0? ## len > 0
0x03e: 720802000000000000   | 	jl L2		# if so, goto Done: ## if so, goto Loop
0x047:                      | Loop:	
0x047: 50870000000000000000 | 	mrmovq (%rdi), %r8
0x051: 50970800000000000000 | 	mrmovq 0x8(%rdi), %r9
0x05b: 50a71000000000000000 | 	mrmovq 0x10(%rdi), %r10
0x065: 50b71800000000000000 | 	mrmovq 0x18(%rdi), %r11
0x06f: 50c72000000000000000 | 	mrmovq 0x20(%rdi), %r12
0x079: 50d72800000000000000 | 	mrmovq 0x28(%rdi), %r13
0x083: 50e73000000000000000 | 	mrmovq 0x30(%rdi), %r14
0x08d: 50173800000000000000 | 	mrmovq 0x38(%rdi), %rcx
0x097: 50374000000000000000 | 	mrmovq 0x40(%rdi), %rbx
0x0a1: 50574800000000000000 | 	mrmovq 0x48(%rdi), %rbp
0x0ab: 6288                 | 	andq %r8,%r8
0x0ad: 40860000000000000000 | 	rmmovq %r8, (%rsi)
0x0b7: 40960800000000000000 | 	rmmovq %r9, 8(%rsi)
0x0c1: 40364000000000000000 | 	rmmovq %rbx, 0x40(%rsi)
0x0cb: 40564800000000000000 | 	rmmovq %rbp, 0x48(%rsi)
0x0d5: 71e800000000000000   | 	jle L1_2
0x0de: c0f00100000000000000 | 	iaddq $1, %rax
0x0e8:                      | L1_2:
0x0e8: 6299                 | 	andq %r9,%r9
0x0ea: 71fd00000000000000   | 	jle L1_3
0x0f3: c0f00100000000000000 | 	iaddq $1, %rax
0x0fd:                      | L1_3:
0x0fd: 62aa                 | 	andq %r10,%r10
0x0ff: 40a61000000000000000 | 	rmmovq %r10, 0x10(%rsi)
0x109: 40b61800000000000000 | 	rmmovq %r11, 0x18(%rsi)
0x113: 712601000000000000   | 	jle L1_4
0x11c: c0f00100000000000000 | 	iaddq $1, %rax
0x126:                      | L1_4:
0x126: 62bb                 | 	andq %r11,%r11
0x128: 713b01000000000000   | 	jle L1_5
0x131: c0f00100000000000000 | 	iaddq $1, %rax
0x13b:                      | L1_5:
0x13b: 62cc                 | 	andq %r12,%r12
0x13d: 40c62000000000000000 | 	rmmovq %r12, 0x20(%rsi)
0x147: 40d62800000000000000 | 	rmmovq %r13, 0x28(%rsi)
0x151: 716401000000000000   | 	jle L1_6
0x15a: c0f00100000000000000 | 	iaddq $1, %rax
0x164:                      | L1_6:
0x164: 62dd                 | 	andq %r13,%r13
0x166: 717901000000000000   | 	jle L1_7
0x16f: c0f00100000000000000 | 	iaddq $1, %rax
0x179:                      | L1_7:
0x179: 62ee                 | 	andq %r14,%r14
0x17b: 40e63000000000000000 | 	rmmovq %r14, 0x30(%rsi)
0x185: 40163800000000000000 | 	rmmovq %rcx, 0x38(%rsi)
0x18f: 71a201000000000000   | 	jle L1_8
0x198: c0f00100000000000000 | 	iaddq $1, %rax
0x1a2:                      | L1_8:
0x1a2: 6211                 | 	andq %rcx,%rcx
0x1a4: 71b701000000000000   | 	jle L1_9
0x1ad: c0f00100000000000000 | 	iaddq $1, %rax
0x1b7:                      | L1_9:
0x1b7: 6233                 | 	andq %rbx, %rbx
0x1b9: 71cc01000000000000   | 	jle L1_10
0x1c2: c0f00100000000000000 | 	iaddq $1, %rax
0x1cc:                      | L1_10:
0x1cc: 6255                 | 	andq %rbp,  %rbp
0x1ce: 71e101000000000000   | 	jle L1_11
0x1d7: c0f00100000000000000 | 	iaddq $1, %rax
0x1e1:                      | L1_11:
0x1e1: c0f75000000000000000 | 	iaddq $0x50, %rdi
0x1eb: c0f65000000000000000 | 	iaddq $0x50, %rsi
0x1f5: c0f2f6ffffffffffffff | 	iaddq $-10, %rdx
0x1ff: 754700000000000000   | 	jge Loop
0x208:                      | L2:
0x208: c0f20900000000000000 | 	iaddq $9, %rdx
0x212: 764e02000000000000   | 	jg Loop2
                            | 	# iaddq $2, %rdx
0x21b: 724d02000000000000   | 	jl L2_Done
0x224: 50870000000000000000 | 	mrmovq (%rdi),%r8
0x22e: 40860000000000000000 | 	rmmovq %r8, (%rsi)
0x238: 6288                 | 	andq %r8, %r8
0x23a: 718003000000000000   | 	jle Done
0x243: c0f00100000000000000 | 	iaddq $1, %rax
                            | 	#addq %r9, %rdx
                            | 	# jle L2_Done
0x24d:                      | L2_Done:
0x24d: 90                   | 	ret
                            | 	
0x24e:                      | Loop2:
0x24e: 50870000000000000000 | 	mrmovq (%rdi), %r8
0x258: 50970800000000000000 | 	mrmovq 8(%rdi), %r9
                            | 	# iaddq $8, %rdi
                            | 	# iaddq $8, %rsi
0x262: c0f2feffffffffffffff | 	iaddq $-2, %rdx
0x26c: 762503000000000000   | 	jg L2_0
0x275: 73bd02000000000000   | 	je D3 # last 3
0x27e: 40860000000000000000 | 	rmmovq %r8, (%rsi)
0x288: 40960800000000000000 | 	rmmovq %r9, 8(%rsi)
0x292: 6288                 | 	andq %r8,%r8
0x294: 71a702000000000000   | 	jle D2_1
0x29d: c0f00100000000000000 | 	iaddq $1, %rax
0x2a7:                      | D2_1:
0x2a7: 6299                 | 	andq %r9, %r9
0x2a9: 718003000000000000   | 	jle Done
0x2b2: c0f00100000000000000 | 	iaddq $1, %rax
0x2bc: 90                   | 	ret
0x2bd:                      | D3:
0x2bd: 50a71000000000000000 | 	mrmovq 0x10(%rdi), %r10
0x2c7: 40860000000000000000 | 	rmmovq %r8, (%rsi)
0x2d1: 40960800000000000000 | 	rmmovq %r9, 8(%rsi)
0x2db: 40a61000000000000000 | 	rmmovq %r10, 0x10(%rsi)
0x2e5: 6288                 | 	andq %r8, %r8
0x2e7: 71fa02000000000000   | 	jle D3_1
0x2f0: c0f00100000000000000 | 	iaddq $1, %rax
0x2fa:                      | D3_1:
0x2fa: 6299                 | 	andq %r9, %r9
0x2fc: 710f03000000000000   | 	jle D3_2
0x305: c0f00100000000000000 | 	iaddq $1, %rax
0x30f:                      | D3_2:
0x30f: 62aa                 | 	andq %r10, %r10
0x311: 718003000000000000   | 	jle Done
0x31a: c0f00100000000000000 | 	iaddq $1, %rax
0x324: 90                   | 	ret
                            | 
0x325:                      | L2_0:
0x325: 40860000000000000000 | 	rmmovq %r8, (%rsi)
0x32f: 40960800000000000000 | 	rmmovq %r9, 8(%rsi)
0x339: 6288                 | 	andq %r8,%r8
0x33b: 714e03000000000000   | 	jle L2_1
0x344: c0f00100000000000000 | 	iaddq $1, %rax
0x34e:                      | L2_1:
0x34e: 6299                 | 	andq %r9, %r9
0x350: 716303000000000000   | 	jle L2_2
0x359: c0f00100000000000000 | 	iaddq $1, %rax
0x363:                      | L2_2:
0x363: c0f71000000000000000 | 	iaddq $0x10, %rdi
0x36d: c0f61000000000000000 | 	iaddq $0x10, %rsi
                            | 	# iaddq $-2, %rdx
0x377: 704e02000000000000   | 	jmp Loop2
                            | 	# iaddq $2, %rdx
                            | 	# je Done
                            | 	# mrmovq (%rdi),%r8
                            | 	# rmmovq %r8, (%rsi)
                            | 	#andq %r8, %r8
                            | 	#jle Done 
                            | 	#iaddq $1, %rax	
                            | 	# mrmovq (%rdi), %r10	# read val from src...
                            | 	# rmmovq %r10, (%rsi)	# ...and store it to dst
                            | 	# andq %r10, %r10		# val <= 0?
                            | 	# jle Npos		# if so, goto Npos:
                            | 	# irmovq $1, %r10
                            | 	# addq %r10, %rax		# count++
                            | 	# iaddq $1, %rax
                            | # Npos:	
                            | 	# irmovq $1, %r10
                            | 	# subq %r10, %rdx		# len--	
                            | 	# irmovq $8, %r10
                            | 	# addq %r10, %rdi		# src++
                            | 	# addq %r10, %rsi		# dst++
                            | 	# iaddq $8, %rdi
                            | 	# iaddq $8, %rsi
                            | 	# iaddq $-1,%rdx
                            | 	# andq %rdx,%rdx		# len > 0?
                            | 	# jg Loop			# if so, goto Loop:
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x380:                      | Done:
0x380: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x381:                      | End:
                            | #/* $end ncopy-ys */
0x381:                      | EndFun:
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x388:                      | 	.align 8
0x388:                      | src:
0x388: 0100000000000000     | 	.quad 1
0x390: 0200000000000000     | 	.quad 2
0x398: fdffffffffffffff     | 	.quad -3
0x3a0: fcffffffffffffff     | 	.quad -4
0x3a8: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x3b0:                      | 	.align 16
0x3b0:                      | Predest:
0x3b0: fadebc0000000000     | 	.quad 0xbcdefa
0x3b8:                      | dest:
0x3b8: abefcd0000000000     | 	.quad 0xcdefab
0x3c0: abefcd0000000000     | 	.quad 0xcdefab
0x3c8: abefcd0000000000     | 	.quad 0xcdefab
0x3d0: abefcd0000000000     | 	.quad 0xcdefab
0x3d8:                      | Postdest:
0x3d8: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x3e0:                      | .align 8
                            | # Run time stack
0x3e0: 0000000000000000     | 	.quad 0
0x3e8: 0000000000000000     | 	.quad 0
0x3f0: 0000000000000000     | 	.quad 0
0x3f8: 0000000000000000     | 	.quad 0
0x400: 0000000000000000     | 	.quad 0
0x408: 0000000000000000     | 	.quad 0
0x410: 0000000000000000     | 	.quad 0
0x418: 0000000000000000     | 	.quad 0
0x420: 0000000000000000     | 	.quad 0
0x428: 0000000000000000     | 	.quad 0
0x430: 0000000000000000     | 	.quad 0
0x438: 0000000000000000     | 	.quad 0
0x440: 0000000000000000     | 	.quad 0
0x448: 0000000000000000     | 	.quad 0
0x450: 0000000000000000     | 	.quad 0
0x458: 0000000000000000     | 	.quad 0
                            | 
0x460:                      | Stack:
